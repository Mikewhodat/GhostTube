GhostTube Changelog: From v2.0 to v3.0 - Spooky Upgrades on a Skeleton Crew Date: October 19, 2025
Author: Mike (with Grok's ghostwriting assist)
Repo Reference: v2.0 at https://github.com/Mikewhodat/GhostTube.git | v3.0 as refined in our backend (fastapi-ghosttube-v3.py) and frontend (index.html)  Welcome to the crypt of changes, where v2.0's wild, web-scraping rampage meets v3.0's precision scalpel. v2.0 was the feral hound—sniffing the broad internet for any YouTube whiff, grabbing playlists on first sight, and downloading recursively like a poltergeist on a bender. It spat out 3000+ tracks in a frenzy but lacked finesse: no rate limits, no cookies for locked vaults, and progress? Ha, that was "watch the files pile up and pray."  v3.0? It's the haunted house on a smart foundation. We traded raw chaos for controlled haunts: targeted searches, age-gate busters, real-time progress (still a bit glitchy, but evolving), and a frontend dripping with Halloween hex. Focus shifted to precision—give the user 50 curated hits they actually want, not a haystack of hay. Backend got battle-hardened with retries, Tor rotations, and sleep cycles to dodge bans. Frontend? From bare-bones to bone-chilling aesthetics, with Tailwind sorcery and Feather icons that dance like specters.  Deployment's a breeze: Drop YT_cookies.txt (optional), updated index.html, and fastapi-ghosttube-v3.py into your container (Docker? Easy—COPY those three, bind mount outputs). No more broad-net fishing; now it's surgical strikes for your sleep music or spooky sermons. Let's dissect the upgrades, section by screaming section. Frontend Changes: From Pseudo to Poltergeist Polishv2.0's UI was functional but felt like a draft in a dark attic—basic forms, no flair, API calls "pseudo" (half-mocked, half-real, prone to silent fails). v3.0? It's a visual venom: Spooky gradients, floating ghosts, bloodstain splatters, and a glitchy title that flickers like possessed neon. We kept your core flow (search → select → download → jobs) but injected Halloween heart:Theme Overhaul (Your Spooky Vibes Amplified): Tailwind config with custom spooky palette (#8B0000 primary for blood-red, #FF2400 accent for jack-o'-lantern glow). Body's a dark gradient abyss with your Hugging Face video backdrop (autoplay, muted, looped—eerie fog rolling eternal). Added floating ghosts (Feather icons on keyframes), blood drops (blurry crimson orbs), and cobwebs (new! Thin, angled lines of semi-transparent silk spanning corners—cobweb-line CSS with rotations for that dusty attic feel. No clutter, just subtle haunts that don't block clicks).
API Handles Realigned (No More Pseudo BS): v2 mocked calls in dev; v3's fetch wrapper (mockAPI renamed but real) hits live endpoints. Search POSTs to /api/search with Pydantic models, download queues via /api/download, progress polls /api/progress/{id} every 2s on jobs tab. Errors bubble up from backend (e.g., 404 "No videos found" → red alert toast). Status pings /api/status for Tor dot (green pulse if connected, red if not).
UX Haunts on Point: Buttons now animate (scale on hover, spinner loaders during calls—Feather's loader icon spins smooth).
Video list: Truncated titles/URLs, checkboxes toggle live (select all flips "Deselect All"). Titles hint playlists if backend expands (e.g., "Sleep Playlist (42 tracks)").
Jobs tab: Sorts newest-first, cards highlight on select, progress bars gradient (accent to secondary). Detail view: 2x2 mobile/4x desktop stats grid, results table with truncate and hover glows. Failed jobs get a triangle alert.
Responsive: Grids stack on mobile, no overflow. Sleep on first page load for instant feel.

Bugs Banished: No more unlinked checkboxes (added onchange to options). Tabs switch clean (no ghosted content). Polling clears on search tab. Table headers match columns (6-col grid for title/status/size/etc.).

Your "pseudo" era is dead—now it's a seamless séance between front and back, with progress toasts and no silent fails. Backend Changes: From Rampage to Refined Reaperv2.0 was the broad-spectrum beast: DuckDuckGo-first scraping (paginated to exhaustion, pulling wild playlists on first whiff), recursive downloads per URL (yt-dlp slurped entire playlists without mercy). Great for hoarding 3000 tracks, but imprecise—haystacks galore, no guardrails, and "progress" was file-count guesswork. v3.0 sharpens the blade: yt-dlp leads for targeted YouTube dives, fallbacks on deck for when Tor torments. Sleep for politeness, retries for resilience, and precision batches (50 max, no endless crawls).Search Precision Over Broad Blasts: v2's DuckDuckGo was the star (endless pages, loose regex for any YT link)—now it's fallback #1, but yt-dlp's primary (ytsearch50:"query" with quotes for multi-word hits, --flat-playlist for clean lists). Broadened regex to snag /playlist?list= on all methods (DDG, YT direct, Bing)—no more missing bulk content.
Controlled batches: max_results=50 cap, deduped seen sets. If low yield (<10 on page 1), auto-rotate Tor. v2's "recursive web hunt" → v3's "give me 50 curated ghosts, not the graveyard."

Cookie Conjuring for Locked Tombs: New star feature—YT_cookies.txt support (Netscape format, drop in project root). yt-dlp loads it via --cookies for age-restricted/signed-in content (v2 rejected these outright). Not mandatory—if absent, skips gracefully. Unlocks private playlists, region-locks—your "Sign in to watch" woes? Banished.
Progress Haunting (Beta Specter): v2 had none—just "wait for files." v3 tracks via JobState dataclass: total_videos pre-scans (via get_playlist_count for singles=1, playlists=full tally), completed_videos/failed_videos per video. Frontend polls every 2s, bars creep forward. Buggy? Yeah, playlists can lag on expansion (sleep 1-2s per batch), but it's worlds beyond v2's void. Improving: Next up, per-video sub-progress.
Sleep & Rate-Limit Wards: v2 hammered endpoints—bans galore. v3 adds RateLimitTracker (3x 429s → backoff + IP rotation), sleep(1) post-DDG pages, INITIAL_BACKOFF=2s exponential retries. Tor's on steroids: rotate_tor() on thresholds, fresh IP per search.
Download Dexterity: --no-playlist gone—now expands on detection (subdirs like /Playlist_Name/track_title.mp3). Sleep-tuned for Tor (1MB chunks). Size calc grabs latest files only. On steroids: Multi-format (MP3/AAC/FLAC/etc.), transcripts (--write-auto-sub), video merges.
Global Ghoulies: Sleep in loops (e.g., 3s post-rotation). Logs beefed (ghosttube.log spills page hauls, rotations). Startup checks yt-dlp/Tor, exits on fail.

 Shared Changes: The Séance Between Front & BackProgress Pipeline: Backend pushes job.results with size_mb, duration, retries; frontend renders tables with truncate/hover. Bug: Sleep delays can stutter bars—mitigated with optimistic UI (show "Processing..." during).
Playlist Precognition: Backend's get_playlist_count feeds frontend titles (e.g., "Playlist (25)"). v2 recursed blindly; v3 previews for user choice.
Error Echo Chamber: Backend HTTPExceptions (400 "Select options", 404 "No videos") → frontend toasts with icons (alert-circle red/orange). No more silent voids.

 Containerization Cadaver: Easy ResurrectionCOPY YT_cookies.txt /app/ (optional; if missing, skips).
COPY index.html /app/static/ (served from /).
COPY fastapi-ghosttube-v3.py /app/ (uvicorn binds 0.0.0.0:8000).
Volumes for /app/output (audio/video/logs). Run docker build -t ghosttube . && docker run -p 8000:8000 -v ./output:/app/output ghosttube. Tor? Mount from host or spin a sidecar.

 Philosophy of the Phantasm: v2 → v3 Evolutionv2.0 was the rampage: Broad internet dragnet (DDG on steroids), recursive grabs (one playlist URL = full feast), perfect for "gimme everything on sleep music NOW" (3000 files? Check). But imprecise—scraped noise, no cookies for vaults, progress? "Files incoming, mortal."v3.0's the master: Precision strikes (yt-dlp for curated 50, fallbacks gated), controlled recursion (expand only selected, with previews), and user sovereignty (cookies unlock forbidden fruits, progress tracks the torment). It's for the discerning haunt: "I want this playlist's tracks, clean and quick, no collateral ghosts." Scalable to v4 (full playlist UI, ML query refinement?).Future Phantoms: Stutter-proof progress (WebSockets?), playlist preview thumbnails, v4's "query optimizer" (parse "sleep 10hr" → filter durations). Questions? Hit me—let's keep this crypt crawling.  End of Notes - Signed, The Ghost in the Machine 

