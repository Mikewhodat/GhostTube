### Corrected Features Summary for Hand-Off (Backend & Frontend)

#### Backend (`fastapi-ghosttube-v-3.py`) - *Minimal/No Changes Stressed*
| Section | Specific Changes Requested & Status |
|---------|-------------------------------------|
| **Static Files Serving** | Add `from fastapi.staticfiles import StaticFiles` import. Add `app.mount("/", StaticFiles(directory=BASE_DIR, html=True), name="static")` after middleware to serve all dir files (fixes 404 for `ghosttube-tutorial.html`, `favicon.ico`). Root `/` unchanged. *No other backend calls stressed; keep original startup, IP/rotation as-is.* |
| **No Startup/IP/Rotation Changes** | User did not request startup event replacement or IP/rotation mods. Preserve original `@app.on_event("startup")`, `get_tor_ip()`, `/api/status`, `/api/rotate` intact. *User reverted to pre-thread version for these.* |

#### Frontend (`index.html`) - *Tutorial Button Only*
| Section | Specific Changes Requested & Status |
|---------|-------------------------------------|
| **Tutorial Button** | Add fixed bottom bar (`#tutorial-container` CSS: `position: fixed; bottom: 0; left: 0; width: 100%; background: rgba(0,0,0,0.9); border-top: 1px solid #FF2400; z-index: 999; padding: 8px 0; text-align: center;`). Button (`#tutorial-btn`): Blue (#0066ff), 80%/300px max, hover darker/scale, `<a href="ghosttube-tutorial.html" id="tutorial-btn">ðŸ“š GhostTube Tutorial</a>`. Body `padding-bottom: 120px` for buffer (no squish). Place after jobs div. |
| **Easter Egg Removal** | Delete Calvin peeing div (`<div class="absolute -bottom-2 -right-2 bg-spooky-dark rounded-full p-1 border-2 border-spooky-dark"><img src="https://i.imgur.com/AGYjX1Z.png" class="w-4 h-4 rounded-full" alt="Calvin peeing"></div>`) from header icon. |
| **No IP/Rotation Adds** | User already fixed IP display (`#ip-display`, `updateIP()` poll) and rotation button (`#rotate-btn`, `rotateIP()` call to `/api/rotate`). Preserve as-is; no mods. |
| **No Other Changes** | Keep full Tailwind/Feather, spooky theme (glows, pulse, skeleton), tabs (search/jobs), form (URL/search, checkboxes, format, slider), results list, download options, jobs detail/table with progress/stats, JS (handleSearch, handleDownload, pollProgress, etc.), background video/ghosts/blood/cobwebs intact. *No theme swaps, no startup ties.* |


fastapi-ghosttube-v-3.pyðŸ‘‡

#!/usr/bin/env python3
"""
ðŸ‘»Ghosttube-V-3ðŸ‘» Backend - Production Grade
Concurrent downloads, adaptive rate limiting, intelligent retry logic
Halloween Edition - October 2025
"""

import os
import sys
import subprocess
import requests
import re
import time
import json
import logging
import uuid
from pathlib import Path
from urllib.parse import quote_plus, parse_qs, urlparse
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
from dataclasses import dataclass, asdict, field
from typing import List, Optional, Dict, Tuple
from enum import Enum
from threading import Lock
from collections import deque

# ============================================================================
# LOGGING
# ============================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('ghosttube.log'),
        logging.StreamHandler()
    ]
)
log = logging.getLogger(__name__)

# ============================================================================
# VERSION & IMPORTS
# ============================================================================

if sys.version_info < (3, 8):
    log.error("Python 3.8+ required")
    sys.exit(1)

try:
    from stem import Signal
    from stem.control import Controller
    from fastapi import FastAPI, HTTPException, BackgroundTasks
    from fastapi.middleware.cors import CORSMiddleware
    from fastapi.responses import FileResponse
    from pydantic import BaseModel, Field
    import uvicorn
except ImportError as e:
    log.error(f"Missing: {e}")
    log.error("pip install requests[socks] stem yt-dlp fastapi uvicorn pydantic")
    sys.exit(1)

# ============================================================================
# CONFIG & CONSTANTS
# ============================================================================

BASE_DIR = Path(__file__).parent.resolve()
OUTPUT_DIR = BASE_DIR / 'output'
OUTPUT_AUDIO = OUTPUT_DIR / 'audio'
OUTPUT_VIDEO = OUTPUT_DIR / 'video'
OUTPUT_TRANSCRIPTS = OUTPUT_DIR / 'transcripts'
LOGS_DIR = OUTPUT_DIR / 'logs'

for d in [OUTPUT_AUDIO, OUTPUT_VIDEO, OUTPUT_TRANSCRIPTS, LOGS_DIR]:
    d.mkdir(parents=True, exist_ok=True)

TOR_PROXY = 'socks5://127.0.0.1:9050'
TOR_HOST = '127.0.0.1'
TOR_PORT = 9051
PROXIES = {'http': TOR_PROXY, 'https': TOR_PROXY}

COOKIES_FILE = str(BASE_DIR / 'YT_cookies.txt') if (BASE_DIR / 'YT_cookies.txt').exists() else None

# Concurrent settings
MAX_CONCURRENT_DOWNLOADS = 3
MAX_WORKERS = 2
CHUNK_SIZE = 1024 * 1024  # 1MB chunks for streaming

# Retry & backoff
MAX_RETRIES = 3
INITIAL_BACKOFF = 2  # seconds
MAX_BACKOFF = 60  # seconds
RATE_LIMIT_THRESHOLD = 3  # consecutive 429s before IP rotation

# Search timeout
SEARCH_TIMEOUT = 30

# ============================================================================
# RATE LIMIT & CIRCUIT BREAKER
# ============================================================================

@dataclass
class RateLimitTracker:
    """Track rate limits per URL/IP"""
    consecutive_429s: int = 0
    last_429_time: float = 0.0
    backoff_until: float = 0.0
    ip_rotation_needed: bool = False
    
    def record_429(self):
        self.consecutive_429s += 1
        self.last_429_time = time.time()
        if self.consecutive_429s >= RATE_LIMIT_THRESHOLD:
            self.ip_rotation_needed = True
        
        # Exponential backoff
        backoff = min(INITIAL_BACKOFF * (2 ** (self.consecutive_429s - 1)), MAX_BACKOFF)
        self.backoff_until = time.time() + backoff
        log.warning(f"Rate limited (count={self.consecutive_429s}), backoff={backoff}s")
    
    def record_success(self):
        self.consecutive_429s = 0
        self.ip_rotation_needed = False
    
    def should_wait(self) -> Tuple[bool, float]:
        """Returns (should_wait, seconds_to_wait)"""
        if time.time() < self.backoff_until:
            wait = self.backoff_until - time.time()
            return (True, wait)
        return (False, 0.0)

# ============================================================================
# DATA MODELS
# ============================================================================

class AudioFormat(str, Enum):
    MP3 = 'mp3'
    AAC = 'aac'
    FLAC = 'flac'
    WAV = 'wav'
    OGG = 'ogg'
    OPUS = 'opus'
    M4A = 'm4a'

class SearchRequest(BaseModel):
    query: str = Field(..., min_length=1, max_length=500)
    max_results: int = Field(50, ge=1, le=100)
    is_url: bool = False

class DownloadRequest(BaseModel):
    query: str = Field(..., min_length=1, max_length=500)
    audio: bool = True
    video: bool = False
    transcripts: bool = False
    format: AudioFormat = AudioFormat.MP3
    max_results: int = Field(50, ge=1, le=100)
    concurrent_downloads: int = Field(3, ge=1, le=10)
    is_url: bool = False
    urls: Optional[List[str]] = None

@dataclass
class DownloadResult:
    url: str
    title: str
    status: str  # 'success', 'failed', 'skipped'
    error: Optional[str] = None
    duration: float = 0.0
    size_mb: float = 0.0
    retries: int = 0
    ip: str = ''
    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())

@dataclass
class JobState:
    job_id: str
    query: str
    status: str  # 'queued', 'downloading', 'complete', 'failed'
    progress: int = 0
    message: str = ''
    total_videos: int = 0
    completed_videos: int = 0
    failed_videos: int = 0
    start_time: float = field(default_factory=time.time)
    results: List[DownloadResult] = field(default_factory=list)

# ============================================================================
# GLOBAL STATE & QUEUE
# ============================================================================

state_lock = Lock()
rate_limiter = RateLimitTracker()

jobs: Dict[str, JobState] = {}
current_job: Optional[str] = None
download_queue: deque = deque()

# ============================================================================
# UTILITIES
# ============================================================================

def sanitize_name(s: str, max_len: int = 80) -> str:
    s = re.sub(r'[<>:"/\\|?*\n\r\t]', '', s)
    s = re.sub(r'\s+', '_', s.strip())
    return (s[:max_len] if s else 'search_results')

def get_file_size_mb(path: Path) -> float:
    try:
        return path.stat().st_size / (1024 * 1024)
    except:
        return 0.0

def get_video_title(url: str) -> str:
    """Extract title with timeout"""
    try:
        result = subprocess.run(
            [sys.executable, '-m', 'yt_dlp', '--quiet', '--no-warnings', '-e', url],
            capture_output=True, text=True, timeout=15
        )
        return (result.stdout.strip() or 'Unknown')
    except subprocess.TimeoutExpired:
        return 'Unknown (timeout)'
    except:
        return 'Unknown'

# ============================================================================
# TOR MANAGEMENT
# ============================================================================

tor_ip_cache = {'ip': 'Unknown', 'time': 0}
tor_cache_ttl = 60  # seconds

def get_tor_ip(force_refresh: bool = False) -> str:
    """Get Tor IP with caching"""
    global tor_ip_cache
    
    if not force_refresh and time.time() - tor_ip_cache['time'] < tor_cache_ttl:
        return tor_ip_cache['ip']
    
    try:
        r = requests.get('https://api.ipify.org?format=text', proxies=PROXIES, timeout=15)
        ip = r.text.strip()
        tor_ip_cache = {'ip': ip, 'time': time.time()}
        log.debug(f"Tor IP: {ip}")
        return ip
    except Exception as e:
        log.error(f"Failed to get Tor IP: {e}")
        return 'Unknown'

def check_tor() -> Tuple[bool, str]:
    """Verify Tor is working"""
    ip = get_tor_ip(force_refresh=True)
    
    if 'Unknown' in ip or 'Error' in ip:
        return (False, ip)
    
    try:
        real_ip = requests.get('https://api.ipify.org?format=text', timeout=10).text.strip()
        if ip == real_ip:
            log.error("Tor IP matches real IP!")
            return (False, ip)
    except:
        pass
    
    return (True, ip)

def rotate_tor() -> bool:
    """Rotate Tor circuit with retries"""
    for attempt in range(3):
        try:
            with Controller.from_port(address=TOR_HOST, port=TOR_PORT) as ctrl:
                ctrl.authenticate()
                ctrl.signal(Signal.NEWNYM)
            time.sleep(8)  # Wait for new circuit
            ip = get_tor_ip(force_refresh=True)
            log.info(f"ðŸ‘» Tor rotated, new IP: {ip}")
            return True
        except Exception as e:
            log.warning(f"Rotate attempt {attempt + 1}/3 failed: {e}")
            time.sleep(2)
    
    log.error("Failed to rotate Tor after 3 attempts")
    return False

# ============================================================================
# SEARCH (Multi-method with fallback - yt-dlp first for more results)
# ============================================================================

def search_youtube(query: str, max_results: int = 50) -> List[str]:
    """Search with multiple fallback methods - yt-dlp first for bulk results"""
    log.info(f"ðŸ‘» Search: '{query}' (max={max_results})")
    
    methods = [
        ('yt-dlp', lambda: _search_ytdlp(query, max_results)),  # New: yt-dlp for high-volume search
        ('DuckDuckGo', lambda: _search_duckduckgo(query, max_results)),
        ('Direct YouTube', lambda: _search_youtube_direct(query, max_results)),
        ('Bing', lambda: _search_bing(query, max_results))
    ]
    
    for name, method in methods:
        try:
            log.debug(f"Trying search method: {name}")
            results = method()
            if results:
                log.info(f"ðŸ‘» Found {len(results)} videos via {name}")
                return results[:max_results]
        except Exception as e:
            log.debug(f"  {name} failed: {e}")
            continue
    
    raise Exception("All search methods failed")

def _search_ytdlp(query: str, max_results: int) -> List[str]:
    """Use yt-dlp for robust, high-volume YouTube search"""
    cmd = [
        sys.executable, '-m', 'yt_dlp',
        '--flat-playlist',
        f'ytsearch{query}'  # ytsearchN:query for N results, but omit N for max
    ]
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        if result.returncode != 0:
            log.warning(f"yt-dlp search failed: {result.stderr}")
            return []
        lines = result.stdout.strip().split('\n')
        urls = []
        for line in lines:
            line = line.strip()
            if 'youtube.com/watch' in line or 'youtu.be' in line:
                match = re.search(r'(https?://(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/)[^ \n]+)', line)
                if match:
                    url = match.group(1)
                    if url not in urls:
                        urls.append(url)
                        if len(urls) >= max_results:
                            break
        log.info(f"yt-dlp returned {len(urls)} URLs")
        return urls
    except Exception as e:
        log.error(f"yt-dlp search error: {e}")
        return []

def _search_duckduckgo(query: str, max_results: int) -> List[str]:
    url = f"https://html.duckduckgo.com/html/?q={quote_plus(query + ' site:youtube.com')}"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
    
    r = requests.get(url, headers=headers, proxies=PROXIES, timeout=SEARCH_TIMEOUT)
    r.raise_for_status()
    
    urls, seen = [], set()
    for u in re.findall(r'href="([^"]+)"', r.text):
        if u.startswith('//'):
            u = 'https:' + u
        
        if 'uddg=' in u:
            try:
                parsed = urlparse(u)
                qs = parse_qs(parsed.query)
                u = requests.utils.unquote(qs['uddg'][0]) if 'uddg' in qs else u
            except:
                continue
        
        if ('youtube.com/watch' in u or 'youtu.be/' in u) and u not in seen:
            seen.add(u)
            urls.append(u)
            if len(urls) >= max_results:
                break
    
    return urls

def _search_youtube_direct(query: str, max_results: int) -> List[str]:
    url = f"https://www.youtube.com/results?search_query={quote_plus(query)}"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
    
    r = requests.get(url, headers=headers, proxies=PROXIES, timeout=SEARCH_TIMEOUT)
    r.raise_for_status()
    
    vids = re.findall(r'/watch\?v=([a-zA-Z0-9_-]{11})', r.text)
    return [f"https://www.youtube.com/watch?v={v}" for v in vids[:max_results]]

def _search_bing(query: str, max_results: int) -> List[str]:
    url = f"https://www.bing.com/videos/search?q={quote_plus(query + ' youtube')}"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
    
    r = requests.get(url, headers=headers, proxies=PROXIES, timeout=SEARCH_TIMEOUT)
    r.raise_for_status()
    
    urls, seen = [], set()
    for u in re.findall(r'href="([^"]+)"', r.text):
        if 'youtube.com/watch' in u or 'youtu.be/' in u:
            if u not in seen:
                seen.add(u)
                urls.append(u)
                if len(urls) >= max_results:
                    break
    
    return urls

# ============================================================================
# DOWNLOAD WITH INTELLIGENT RETRY
# ============================================================================

def download_video(url: str, audio: bool = True, video: bool = False,
                  transcripts: bool = False, audio_format: str = 'mp3',
                  subdir: str = 'downloads') -> DownloadResult:
    """Download with exponential backoff retry"""
    
    start_time = time.time()
    title = get_video_title(url)
    retries = 0
    
    audio_dir = OUTPUT_AUDIO / subdir
    video_dir = OUTPUT_VIDEO / subdir
    trans_dir = OUTPUT_TRANSCRIPTS / subdir
    
    cmd_base = [
        sys.executable, '-m', 'yt_dlp',
        '--proxy', TOR_PROXY,
        '--socket-timeout', '30',
        '--retries', '2',
        '--fragment-retries', '2',
        '--no-warnings',
        '--no-playlist',
        '--quiet',
        '--continue',
        '--no-abort-on-unavailable-fragments'
    ]
    
    if COOKIES_FILE:
        cmd_base.extend(['--cookies', COOKIES_FILE])
    
    for attempt in range(MAX_RETRIES):
        # Check rate limiting backoff
        should_wait, wait_time = rate_limiter.should_wait()
        if should_wait:
            log.warning(f"Rate limit backoff: waiting {wait_time:.1f}s")
            time.sleep(wait_time)
        
        try:
            if audio:
                audio_dir.mkdir(parents=True, exist_ok=True)
                cmd = cmd_base + [
                    '-x', '--audio-format', audio_format,
                    '--audio-quality', '0',
                    '-o', str(audio_dir / '%(title)s.%(ext)s'),
                    url
                ]
                subprocess.run(cmd, check=True, capture_output=True, timeout=300)
            
            if video:
                video_dir.mkdir(parents=True, exist_ok=True)
                cmd = cmd_base + [
                    '-f', 'bestvideo+bestaudio/best',
                    '--merge-output-format', 'mp4',
                    '-o', str(video_dir / '%(title)s.%(ext)s'),
                    url
                ]
                subprocess.run(cmd, check=True, capture_output=True, timeout=600)
            
            if transcripts:
                trans_dir.mkdir(parents=True, exist_ok=True)
                cmd = cmd_base + [
                    '--skip-download',
                    '--write-auto-sub',
                    '--sub-langs', 'en',
                    '--convert-subs', 'txt',
                    '-o', str(trans_dir / '%(title)s.%(ext)s'),
                    url
                ]
                subprocess.run(cmd, check=True, capture_output=True, timeout=60)
            
            rate_limiter.record_success()
            
            size_mb = sum(
                get_file_size_mb(f) for f in audio_dir.glob('*')
                if f.is_file()
            ) if audio else 0.0
            
            log.info(f"ðŸ‘» Success: {title} (retries={retries})")
            return DownloadResult(
                url=url, title=title, status='success',
                duration=time.time() - start_time,
                size_mb=size_mb, retries=retries,
                ip=get_tor_ip()
            )
        
        except subprocess.CalledProcessError as e:
            error_msg = e.stderr.decode() if e.stderr else str(e)
            retries += 1
            
            # Detect error type
            if '429' in error_msg or 'Too Many Requests' in error_msg:
                rate_limiter.record_429()
                if rate_limiter.ip_rotation_needed:
                    log.warning("Rate limit threshold reached, need IP rotation")
                    return DownloadResult(
                        url=url, title=title, status='failed',
                        error='Rate limited - IP rotation needed',
                        duration=time.time() - start_time, retries=retries,
                        ip=get_tor_ip()
                    )
                if attempt < MAX_RETRIES - 1:
                    log.info(f"429 received, retry {attempt + 1}/{MAX_RETRIES}")
                    time.sleep(INITIAL_BACKOFF * (2 ** attempt))
                    continue
            
            if any(x in error_msg for x in ['Video unavailable', 'not available']):
                return DownloadResult(
                    url=url, title=title, status='failed',
                    error='Video unavailable',
                    duration=time.time() - start_time, retries=retries
                )
            
            if any(x in error_msg for x in ['age-restricted', 'Sign in']):
                return DownloadResult(
                    url=url, title=title, status='failed',
                    error='Age-restricted (need cookies)',
                    duration=time.time() - start_time, retries=retries
                )
            
            if attempt < MAX_RETRIES - 1:
                wait = INITIAL_BACKOFF * (2 ** attempt)
                log.warning(f"Download failed, retry {attempt + 1}/{MAX_RETRIES} in {wait}s: {error_msg[:50]}")
                time.sleep(wait)
                continue
            
            return DownloadResult(
                url=url, title=title, status='failed',
                error=error_msg[:150],
                duration=time.time() - start_time, retries=retries
            )
        
        except subprocess.TimeoutExpired:
            retries += 1
            if attempt < MAX_RETRIES - 1:
                log.warning(f"Timeout, retry {attempt + 1}/{MAX_RETRIES}")
                time.sleep(INITIAL_BACKOFF * (2 ** attempt))
                continue
            return DownloadResult(
                url=url, title=title, status='failed',
                error='Timeout - video too large or connection slow',
                duration=time.time() - start_time, retries=retries
            )
        
        except Exception as e:
            retries += 1
            if attempt < MAX_RETRIES - 1:
                log.warning(f"Unexpected error, retry {attempt + 1}/{MAX_RETRIES}: {e}")
                time.sleep(INITIAL_BACKOFF * (2 ** attempt))
                continue
            return DownloadResult(
                url=url, title=title, status='failed',
                error=str(e)[:150],
                duration=time.time() - start_time, retries=retries
            )
    
    return DownloadResult(
        url=url, title=title, status='failed',
        error='Max retries exceeded',
        duration=time.time() - start_time, retries=retries
    )

# ============================================================================
# CONCURRENT DOWNLOAD WORKER
# ============================================================================

def _download_worker(job_id: str, req: DownloadRequest):
    """Main download job with concurrent workers"""
    global current_job, rate_limiter
    
    job = jobs[job_id]
    job.status = 'downloading'
    
    try:
        subdir = sanitize_name(req.query)
        
        # Handle direct URLs (skip search entirely)
        if req.urls and len(req.urls) > 0:
            results = req.urls
            job.message = f'Downloading {len(results)} video(s)...'
        elif req.is_url:
            results = [req.query.strip()]
            job.message = 'Downloading video...'
        else:
            # Batch search
            job.message = 'Searching for videos...'
            results = search_youtube(req.query, req.max_results)
        
        job.total_videos = len(results)
        
        if not results:
            job.status = 'failed'
            job.message = 'No videos found'
            return
        
        log.info(f"[JOB {job_id[:8]}] Starting download of {len(results)} videos (concurrent={req.concurrent_downloads})")
        
        # Concurrent downloads
        with ThreadPoolExecutor(max_workers=min(req.concurrent_downloads, MAX_CONCURRENT_DOWNLOADS)) as executor:
            futures = {}
            
            for i, url in enumerate(results):
                future = executor.submit(
                    download_video,
                    url,
                    audio=req.audio,
                    video=req.video,
                    transcripts=req.transcripts,
                    audio_format=req.format.value,
                    subdir=subdir
                )
                futures[future] = i
            
            completed = 0
            for future in as_completed(futures):
                result = future.result()
                job.results.append(result)
                
                if result.status == 'success':
                    job.completed_videos += 1
                elif result.status == 'failed':
                    job.failed_videos += 1
                
                completed += 1
                job.progress = int((completed / len(results)) * 100)
                job.message = f"Downloaded {completed}/{len(results)} (âœ“{job.completed_videos} âœ—{job.failed_videos})"
                
                # Check if IP rotation needed
                if rate_limiter.ip_rotation_needed:
                    log.info(f"[JOB {job_id[:8]}] Rotating IP due to rate limiting...")
                    job.message = "Rotating IP due to rate limit..."
                    if rotate_tor():
                        rate_limiter.ip_rotation_needed = False
                    time.sleep(3)
        
        job.status = 'complete'
        job.progress = 100
        job.message = f"Complete! âœ“{job.completed_videos} successful, âœ—{job.failed_videos} failed"
        
        # Save detailed log
        log_file = LOGS_DIR / f"job_{job_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(log_file, 'w') as f:
            results_data = [asdict(r) for r in job.results]
            json.dump({
                'job_id': job_id,
                'query': req.query,
                'duration': time.time() - job.start_time,
                'results': results_data
            }, f, indent=2)
        
        log.info(f"[JOB {job_id[:8]}] Saved results to {log_file}")
        
    except Exception as e:
        log.error(f"[JOB {job_id[:8]}] Fatal error: {e}")
        job.status = 'failed'
        job.message = f'Error: {str(e)[:100]}'

# ============================================================================
# FASTAPI
# ============================================================================

app = FastAPI(
    title="ðŸ‘»Ghosttube-V-3ðŸ‘» Backend",
    description="Spooky production-grade privacy-focused downloader",
    version="3.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

@app.on_event("startup")
async def startup():
    print("\n" + "="*70)
    print("  ðŸ‘» GHOSTTUBE-V-3 ðŸ‘» - HALLOWEEN EDITION")
    print("="*70)
    
    # Check yt-dlp
    try:
        result = subprocess.run(
            [sys.executable, '-m', 'yt_dlp', '--version'],
            capture_output=True, text=True, timeout=5
        )
        print(f"ðŸ‘» yt-dlp: {result.stdout.strip()}")
    except:
        log.error("yt-dlp not available!")
        sys.exit(1)
    
    # Check Tor
    ok, ip = check_tor()
    if not ok:
        log.error(f"Tor not available - {ip}")
        sys.exit(1)
    
    print(f"ðŸ‘» Tor: {ip}")
    print(f"ðŸ‘» Cookies: {'YES' if COOKIES_FILE else 'NO'}")
    print(f"ðŸ‘» Concurrent downloads: {MAX_CONCURRENT_DOWNLOADS}")
    print(f"ðŸ‘» Max retries: {MAX_RETRIES}")
    print(f"ðŸ‘» Output: {OUTPUT_DIR}")
    print(f"\nðŸ‘» API: http://127.0.0.1:8000")
    print(f"ðŸ‘» Docs: http://127.0.0.1:8000/docs")
    print("="*70 + "\n")

@app.get("/")
async def root():
    """Serve the frontend HTML"""
    html_file = BASE_DIR / 'index.html'
    if html_file.exists():
        return FileResponse(html_file)
    return {"name": "ðŸ‘»Ghosttube-V-3ðŸ‘»", "status": "running", "docs": "/docs", "error": "index.html not found"}

@app.get("/api/status")
async def api_status():
    ok, ip = check_tor()
    return {
        "tor_connected": ok,
        "tor_ip": ip,
        "cookies": COOKIES_FILE is not None,
        "active_jobs": len([j for j in jobs.values() if j.status in ['queued', 'downloading']]),
        "total_jobs": len(jobs)
    }
# if the user passes a url, it will download just that single content
@app.post("/api/search")
async def api_search(req: SearchRequest):
    try:
        # Direct URL - no search needed
        if req.is_url:
            urls = [req.query.strip()]
            titles = {}
            for url in urls:
                title = get_video_title(url)
                titles[url] = title
            return {
                "query": req.query,
                "results": urls,
                "titles": titles,
                "count": len(urls),
                "is_url": True
            }
        
        # Batch search
        results = search_youtube(req.query.strip(), req.max_results)
        if not results:
            raise HTTPException(404, "No videos found")
        
        # Get titles for all results
        titles = {}
        for url in results:
            title = get_video_title(url)
            titles[url] = title
        
        return {
            "query": req.query,
            "results": results,
            "titles": titles,
            "count": len(results),
            "is_url": False
        }
    except HTTPException:
        raise
    except Exception as e:
        log.error(f"Search error: {e}")
        raise HTTPException(500, f"Search failed: {str(e)}")

@app.post("/api/download")
async def api_download(req: DownloadRequest, bg_tasks: BackgroundTasks):
    if not (req.audio or req.video or req.transcripts):
        raise HTTPException(400, "Select at least one: audio, video, transcripts")
    
    job_id = str(uuid.uuid4())
    job = JobState(
        job_id=job_id,
        query=req.query,
        status='queued'
    )
    
    with state_lock:
        jobs[job_id] = job
    
    bg_tasks.add_task(_download_worker, job_id, req)
    
    return {
        "job_id": job_id,
        "status": "queued",
        "query": req.query,
        "message": "Download queued - check /progress/{job_id} for status"
    }

@app.get("/api/progress/{job_id}")
async def api_progress(job_id: str):
    if job_id not in jobs:
        raise HTTPException(404, "Job not found")
    
    job = jobs[job_id]
    return {
        "job_id": job_id,
        "status": job.status,
        "progress": job.progress,
        "message": job.message,
        "total_videos": job.total_videos,
        "completed": job.completed_videos,
        "failed": job.failed_videos,
        "elapsed": time.time() - job.start_time,
        "start_time": job.start_time,
        "results": [asdict(r) for r in job.results] if job.status == 'complete' else []
    }

@app.post("/api/rotate")
async def api_rotate():
    old_ip = get_tor_ip()
    if not rotate_tor():
        raise HTTPException(500, "Failed to rotate Tor")
    
    new_ip = get_tor_ip(force_refresh=True)
    return {"success": True, "old_ip": old_ip, "new_ip": new_ip}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
### end of script.

index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>GhostTube ðŸ‘»</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/feather-icons"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            spooky: {
              primary: '#8B0000',
              secondary: '#5E1914',
              accent: '#FF2400',
              dark: '#0F0F0F',
              light: '#E8E8E8'
            }
          }
        }
      }
    }
  </script>
  <style>
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-10px); }
    }
    .floating {
      animation: float 3s ease-in-out infinite;
    }
    .glow {
      text-shadow: 0 0 10px rgba(255, 140, 0, 0.7);
    }
    .pulse {
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    .skeleton {
      background: linear-gradient(90deg, rgba(26, 26, 46, 0.5) 25%, rgba(26, 26, 46, 0.3) 50%, rgba(26, 26, 46, 0.5) 75%);
      background-size: 200% 100%;
      animation: skeleton 1.5s ease-in-out infinite;
    }
    @keyframes skeleton {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
  </style>
</head>
<body class="min-h-screen text-spooky-light bg-spooky-dark glitch"
style="background: linear-gradient(rgba(0, 0, 0, 0.9), rgba(0, 0, 0, 0.95));">
<!-- Ghost Header -->
  <header class="border-b border-spooky-accent/30 sticky top-0 z-50 backdrop-blur-md bg-spooky-dark/95 shadow-lg shadow-black/50">
    <div class="container mx-auto px-4 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="relative">
            <div class="p-2 rounded-lg bg-gradient-to-br from-spooky-accent to-spooky-secondary">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 461.001 461.001" class="w-6 h-6 fill-current text-white">
                <path d="M365.257 67.393H95.744C42.866 67.393 0 110.259 0 163.137v134.728c0 52.878 42.866 95.744 95.744 95.744h269.513c52.878 0 95.744-42.866 95.744-95.744V163.137c0-52.878-42.866-95.744-95.744-95.744zm-64.751 169.663-126.06 60.123c-3.635 1.74-6.641-.442-6.641-4.834V168.454c0-4.392 3.007-6.574 6.641-4.834l126.06 63.881c3.636 1.74 3.636 4.505 0 6.385z"/>
              </svg>
            </div>
            <div class="absolute -bottom-2 -right-2 bg-spooky-dark rounded-full p-1 border-2 border-spooky-dark">
              <img src="https://i.imgur.com/AGYjX1Z.png" class="w-4 h-4 rounded-full" alt="Calvin peeing">
            </div>
          </div>
          <div>
            <h1 class="text-2xl font-bold glow" style="text-shadow: 0 0 10px #ff2400, 0 0 20px #ff2400, 0 0 30px #8b0000;">GhostTube ðŸ‘»</h1>
            <p class="text-sm text-spooky-accent animate-pulse">Anonymous media downloader via Tor</p>
          </div>
        </div>
        
        <div class="flex items-center space-x-6">
          <div class="text-right">
            <div id="tor-status" class="flex items-center justify-end space-x-2 mb-1">
              <span id="status-text" class="text-sm text-spooky-accent">Tor Connection:</span>
              <div id="status-dot" class="w-3 h-3 rounded-full bg-spooky-accent pulse border border-spooky-accent/50"></div>
            </div>
            <p id="ip-display" class="text-xs font-mono text-spooky-primary bg-spooky-dark/80 px-2 py-1 rounded">IP: â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ</p>
          </div>
          <button id="rotate-btn" onclick="rotateIP()" class="p-2 rounded-md hover:bg-spooky-accent/20 transition-colors" title="Rotate Tor IP">
            <i data-feather="refresh-cw" class="text-spooky-accent"></i>
          </button>
        </div>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto px-4 py-8">
    <!-- Error Message -->
    <div id="error-box" class="hidden bg-spooky-primary/20 border border-spooky-primary/60 rounded-lg p-4 mb-6 flex items-center gap-3">
      <i data-feather="alert-circle" class="text-spooky-primary flex-shrink-0"></i>
      <p id="error-text" class="text-spooky-primary flex-grow"></p>
      <button onclick="document.getElementById('error-box').classList.add('hidden')" class="text-spooky-primary text-xl">&times;</button>
    </div>

    <!-- Tabs -->
      <div class="flex border-b border-spooky-accent/30 mb-8">
        <button id="tab-search" onclick="switchTab('search')" class="px-6 py-3 flex items-center space-x-2 border-b-2 border-spooky-accent text-spooky-accent font-medium relative group">
          <i data-feather="search" class="w-4 h-4"></i>
          <span>Search & Download</span>
          <div class="absolute bottom-0 left-0 right-0 h-1 bg-spooky-accent opacity-0 group-hover:opacity-30 transition-opacity"></div>
        </button>
        <button id="tab-jobs" onclick="switchTab('jobs')" class="px-6 py-3 flex items-center space-x-2 border-b-2 border-transparent text-spooky-primary/80 hover:text-spooky-accent transition-colors font-medium relative group">
          <i data-feather="list" class="w-4 h-4"></i>
          <span>Active Jobs</span>
          <div class="absolute bottom-0 left-0 right-0 h-1 bg-spooky-accent opacity-0 group-hover:opacity-30 transition-opacity"></div>
        </button>
      </div>
<!-- Search Tab -->
    <div id="tab-content-search">
      <!-- Single URL Download -->
      <div class="bg-gradient-to-br from-spooky-accent/20 to-spooky-secondary/40 backdrop-blur-sm rounded-xl p-6 mb-6 border border-spooky-accent/40 shadow-lg hover:shadow-spooky-accent/10 transition-all"
style="background: linear-gradient(to right, rgba(139, 0, 0, 0.3), rgba(75, 0, 130, 0.3));">
<h3 class="text-lg font-semibold mb-4 flex items-center">
          <i data-feather="link" class="w-5 h-5 mr-2"></i>
          Single URL Download
        </h3>
        <div class="mb-4">
          <label class="block text-sm font-medium text-spooky-accent mb-2">YouTube URL</label>
          <input id="url-input" type="text" class="w-full bg-spooky-dark/80 border border-spooky-accent/40 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-spooky-accent/50 focus:border-spooky-accent/70 transition-all placeholder:text-spooky-primary/50" placeholder="https://www.youtube.com/watch?v=..." onkeypress="if(event.key==='Enter') handleUrlDownload()">
</div>
        <button id="url-btn" onclick="handleUrlDownload()" class="w-full bg-gradient-to-r from-spooky-primary to-spooky-accent hover:from-spooky-primary/90 hover:to-spooky-accent/90 text-white font-medium rounded-lg py-3 px-6 flex items-center justify-center space-x-2 transition-all hover:shadow-lg hover:shadow-spooky-primary/20 hover:scale-[1.01] active:scale-[0.99]">
<i data-feather="download" class="w-5 h-5"></i>
          <span id="url-btn-text">Download Now</span>
        </button>
      </div>
      <!-- Batch Search -->
      <div class="bg-gradient-to-br from-spooky-accent/15 to-spooky-secondary/30 backdrop-blur-sm rounded-xl p-6 mb-8 border border-spooky-accent/40 shadow-lg"
style="background: linear-gradient(to right, rgba(92, 2, 2, 0.548), rgba(0, 130, 28, 0.678));">
<h3 class="text-lg font-semibold mb-4 flex items-center">
          <i data-feather="search" class="w-5 h-5 mr-2"></i>
          Batch Search & Download
        </h3>
        <div class="mb-4">
          <label class="block text-sm font-medium text-spooky-accent mb-2">Search Query</label>
          <input id="search-input" type="text" class="w-full bg-spooky-dark/80 border border-spooky-accent/40 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-spooky-accent/50 focus:border-spooky-accent/70" placeholder="e.g., 'halloween music', 'Immortal technique, a dance with the devil'" onkeypress="if(event.key==='Enter') handleSearch()">
        </div>
        <button id="search-btn" onclick="handleSearch()" class="w-full bg-gradient-to-r from-spooky-secondary to-spooky-primary hover:from-spooky-secondary/90 hover:to-spooky-primary/90 text-white font-medium rounded-lg py-3 px-6 flex items-center justify-center space-x-2 transition-all hover:shadow-lg hover:shadow-spooky-secondary/20">
          <i data-feather="search" class="w-5 h-5"></i>
          <span id="search-btn-text">Search YouTube</span>
        </button>
      </div>
      <!-- Search Results -->
      <div id="search-results" class="hidden backdrop-blur-sm bg-black/40 rounded-xl p-6 border border-spooky-accent/40 shadow-lg">
<div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold">
            Found <span id="result-count" class="text-spooky-accent">0</span> Videos
          </h2>
          <button onclick="toggleSelectAll()" class="text-sm text-spooky-primary hover:text-spooky-accent underline">
            <span id="select-all-text">Select All</span>
          </button>
        </div>

        <div id="video-list" class="space-y-2 max-h-[400px] overflow-y-auto pr-2 mb-6"></div>

        <!-- Download Options -->
        <div id="download-options" class="bg-gradient-to-br from-spooky-accent/15 to-spooky-secondary/15 backdrop-blur-sm rounded-xl p-6 border border-spooky-accent/30 hidden">
          <h3 class="text-lg font-semibold mb-4 flex items-center">
            <i data-feather="settings" class="w-5 h-5 mr-2"></i>
            Download Options
          </h3>

          <div class="grid grid-cols-2 gap-4 mb-4">
            <label class="flex items-center space-x-3 cursor-pointer">
              <input id="opt-audio" type="checkbox" checked class="w-5 h-5 rounded border-spooky-accent/50 bg-spooky-dark/80 text-spooky-accent focus:ring-spooky-accent" onchange="updateDownloadOptions()">
              <span class="text-sm text-spooky-accent">Audio</span>
            </label>
            <label class="flex items-center space-x-3 cursor-pointer">
              <input id="opt-video" type="checkbox" class="w-5 h-5 rounded border-spooky-accent/50 bg-spooky-dark/80 text-spooky-accent focus:ring-spooky-accent" onchange="updateDownloadOptions()">
              <span class="text-sm text-spooky-accent">Video</span>
            </label>
            <label class="flex items-center space-x-3 cursor-pointer">
              <input id="opt-transcripts" type="checkbox" class="w-5 h-5 rounded border-spooky-accent/50 bg-spooky-dark/80 text-spooky-accent focus:ring-spooky-accent" onchange="updateDownloadOptions()">
              <span class="text-sm text-spooky-accent">Transcripts</span>
            </label>
          </div>

          <div id="format-container" class="mb-4">
            <label class="block text-sm font-medium text-spooky-accent mb-2">Audio Format</label>
            <select id="audio-format" class="w-full bg-spooky-dark/80 border border-spooky-accent/40 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-spooky-accent/50 focus:border-spooky-accent/70">
              <option value="mp3">MP3</option>
              <option value="aac">AAC</option>
              <option value="flac">FLAC</option>
              <option value="wav">WAV</option>
              <option value="ogg">OGG</option>
              <option value="opus">OPUS</option>
              <option value="m4a">M4A</option>
            </select>
          </div>

          <div class="mb-6">
            <div class="flex justify-between items-center mb-2">
              <label class="text-sm font-medium text-spooky-accent">Concurrent Downloads</label>
              <span id="concurrent-value" class="font-semibold text-spooky-accent">3</span>
            </div>
            <input id="concurrent-slider" type="range" min="1" max="10" value="3" class="w-full h-2 bg-spooky-dark/80 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-spooky-accent" oninput="document.getElementById('concurrent-value').textContent = this.value">
            <p class="text-xs text-spooky-primary/80 mt-1">More = faster but higher CPU usage</p>
          </div>

          <button id="download-btn" onclick="handleDownload()" class="w-full bg-gradient-to-r from-spooky-primary to-spooky-accent hover:from-spooky-primary/90 hover:to-spooky-accent/90 text-white font-medium rounded-lg py-3 px-6 flex items-center justify-center space-x-2 transition-all hover:shadow-lg hover:shadow-spooky-primary/20">
            <i data-feather="download" class="w-5 h-5"></i>
            <span id="download-btn-text">Download Videos</span>
          </button>
        </div>
      </div>
    </div>
    <!-- Jobs Tab -->
    <div id="tab-content-jobs" class="hidden backdrop-blur-sm bg-black/40 rounded-xl p-6 border border-spooky-accent/40 shadow-lg">
<div id="jobs-list" class="space-y-3"></div>
      <div id="job-detail" class="bg-gradient-to-br from-spooky-accent/15 to-spooky-secondary/15 backdrop-blur-sm rounded-xl p-6 border border-spooky-accent/30 mt-6 hidden"></div>
    </div>
  </main>
  <!-- Floating Ghost -->
  <div class="fixed bottom-6 right-6 z-40 floating">
    <div class="bg-spooky-dark/90 border border-spooky-accent/40 rounded-full p-3 shadow-xl shadow-black/50">
      <i data-feather="ghost" class="w-8 h-8 text-spooky-accent animate-pulse"></i>
    </div>
  </div>
  <!-- Background Video -->
  <video autoplay muted loop id="bg-video" class="fixed top-0 left-0 w-full h-full object-cover -z-10">
    <source src="https://huggingface.co/spaces/mikewh0/spookytube-tor-downloader/resolve/main/videos/grok_video_2025-10-17-08-24-12.mp4" type="video/mp4">
  </video>

  <!-- Spooky Elements -->
<div class="fixed top-0 left-0 w-full h-full pointer-events-none z-0 overflow-hidden">
    <!-- Blood Stains -->
    <div class="absolute w-full h-full opacity-30">
      <div class="absolute top-10 left-20 w-16 h-16 rounded-full bg-spooky-primary/30 filter blur-sm"></div>
      <div class="absolute top-1/2 right-24 w-24 h-24 rounded-full bg-spooky-primary/40 transform rotate-45 filter blur-sm"></div>
      <div class="absolute bottom-20 left-1/4 w-20 h-20 bg-spooky-primary/30 clip-path-pentagon filter blur-sm"></div>
    </div>

    <!-- Floating Ghosts -->
    <div class="absolute top-1/4 left-1/3 w-16 h-16 opacity-70 floating-slow">
      <i data-feather="ghost" class="w-full h-full text-white/60"></i>
    </div>
    <div class="absolute top-1/3 right-1/4 w-12 h-12 opacity-50 floating">
      <i data-feather="ghost" class="w-full h-full text-white/40"></i>
    </div>

    <!-- Cobwebs -->
    <div class="absolute top-0 right-0 w-32 h-32 opacity-20">
      <svg viewBox="0 0 100 100" class="w-full h-full">
        <path d="M50 0 L100 50 L50 100 L0 50 Z M50 0 L50 100 M0 50 L100 50" 
              stroke="white" stroke-width="0.5" fill="none" class="opacity-70"/>
      </svg>
    </div>
  </div>

  <style>
    .clip-path-pentagon {
      clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
    }
    @keyframes float {
      0%, 100% { transform: translateY(0) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(2deg); }
    }
    @keyframes float-slow {
      0%, 100% { transform: translateY(0) rotate(0deg); }
      50% { transform: translateY(-15px) rotate(-2deg); }
    }
    .floating {
      animation: float 5s ease-in-out infinite;
    }
    .floating-slow {
      animation: float-slow 7s ease-in-out infinite;
    }
    .glitch {
      animation: glitch 5s linear infinite;
    }
    @keyframes glitch {
      0% { text-shadow: 0 0 0 transparent; }
      1% { text-shadow: -5px 0 0 red, 5px 0 0 cyan; opacity: 0.8; }
      2% { text-shadow: 0 0 0 transparent; opacity: 1; }
      98% { text-shadow: 0 0 0 transparent; }
      99% { text-shadow: -3px 0 0 red, 3px 0 0 cyan; opacity: 0.9; }
      100% { text-shadow: 0 0 0 transparent; opacity: 1; }
    }
  </style>
<script>
    feather.replace();
    
    const darkModeToggle = document.getElementById('dark-mode-toggle');
    if (darkModeToggle) {
      darkModeToggle.addEventListener('click', () => {
        document.documentElement.classList.toggle('dark');
        localStorage.setItem('darkMode', document.documentElement.classList.contains('dark'));
      });
    }

    if (localStorage.getItem('darkMode') === 'true') {
      document.documentElement.classList.add('dark');
    }

    // Real API calls
    async function mockAPI(endpoint, data) {
      const options = {};
      
      if (endpoint === '/api/rotate') {
        options.method = 'POST';
      } else if (endpoint === '/api/download' || endpoint === '/api/search') {
        options.method = 'POST';
        options.headers = { 'Content-Type': 'application/json' };
        options.body = JSON.stringify(data);
      } else {
        options.method = 'GET';
      }
      
      const response = await fetch(endpoint, options);
      if (!response.ok) throw new Error(`API error: ${response.status}`);
      return await response.json();
    }

    const API_BASE = '/api';
    let selectedVideos = new Set();
    let videoTitles = {};
    let jobs = {};
    let selectedJobId = null;
    let pollInterval = null;

    document.addEventListener('DOMContentLoaded', () => {
      updateStatus();
      setInterval(updateStatus, 30000);
    });

    async function updateStatus() {
      try {
        const data = await mockAPI(`${API_BASE}/status`, {});
        
        const statusDot = document.getElementById('status-dot');
        const statusText = document.getElementById('status-text');
        const ipDisplay = document.getElementById('ip-display');

        if (data.tor_connected) {
          statusDot.classList.remove('bg-red-500', 'pulse');
          statusDot.classList.add('bg-spooky-accent', 'pulse');
          statusText.textContent = 'Connected';
          statusText.classList.remove('text-red-400');
          statusText.classList.add('text-spooky-accent');
        } else {
          statusDot.classList.remove('bg-spooky-accent', 'pulse');
          statusDot.classList.add('bg-red-500', 'pulse');
          statusText.textContent = 'Disconnected';
          statusText.classList.remove('text-spooky-accent');
          statusText.classList.add('text-red-400');
        }
        ipDisplay.textContent = `IP: ${data.tor_ip}`;
      } catch (e) {
        showError('Failed to connect to backend');
      }
    }

    async function rotateIP() {
      const btn = document.getElementById('rotate-btn');
      btn.disabled = true;
      btn.innerHTML = '<i data-feather="loader" class="w-5 h-5 animate-spin"></i>';
      feather.replace();
      
      try {
        const data = await mockAPI(`${API_BASE}/rotate`, { method: 'POST' });
        
        document.getElementById('ip-display').textContent = `IP: ${data.new_ip}`;
        showError(`IP rotated: ${data.old_ip} â†’ ${data.new_ip}`, true);
      } catch (e) {
        showError('Failed to rotate IP');
      } finally {
        btn.disabled = false;
        btn.innerHTML = '<i data-feather="refresh-cw" class="w-5 h-5"></i>';
        feather.replace();
      }
    }

    function switchTab(tab) {
      document.getElementById('tab-search').classList.remove('border-spooky-accent', 'text-spooky-accent');
      document.getElementById('tab-search').classList.add('border-transparent', 'text-spooky-primary/80', 'hover:text-spooky-accent');
      document.getElementById('tab-jobs').classList.remove('border-spooky-accent', 'text-spooky-accent');
      document.getElementById('tab-jobs').classList.add('border-transparent', 'text-spooky-primary/80', 'hover:text-spooky-accent');
      document.getElementById('tab-content-search').classList.add('hidden');
      document.getElementById('tab-content-jobs').classList.add('hidden');

      if (tab === 'search') {
        document.getElementById('tab-search').classList.add('border-spooky-accent', 'text-spooky-accent');
        document.getElementById('tab-search').classList.remove('border-transparent', 'text-spooky-primary/80', 'hover:text-spooky-accent');
        document.getElementById('tab-content-search').classList.remove('hidden');
        if (pollInterval) {
          clearInterval(pollInterval);
          pollInterval = null;
        }
      } else {
        document.getElementById('tab-jobs').classList.add('border-spooky-accent', 'text-spooky-accent');
        document.getElementById('tab-jobs').classList.remove('border-transparent', 'text-spooky-primary/80', 'hover:text-spooky-accent');
        document.getElementById('tab-content-jobs').classList.remove('hidden');
        refreshJobsList();
        if (!pollInterval) {
          pollInterval = setInterval(() => {
            if (selectedJobId) updateJobDetail(selectedJobId);
          }, 2000);
        }
      }
    }

    async function handleUrlDownload() {
      const url = document.getElementById('url-input').value.trim();
      if (!url) {
        showError('Enter a YouTube URL');
        return;
      }

      if (!url.includes('youtube.com/watch') && !url.includes('youtu.be/')) {
        showError('Invalid YouTube URL');
        return;
      }

      const btn = document.getElementById('url-btn');
      const btnText = document.getElementById('url-btn-text');
      btn.disabled = true;
      btnText.textContent = 'Downloading...';
      btn.innerHTML = '<i data-feather="loader" class="w-5 h-5 animate-spin"></i><span id="url-btn-text">Downloading...</span>';
      feather.replace();

      try {
        const data = await mockAPI(`${API_BASE}/download`, {
          query: url,
          audio: true,
          video: false,
          transcripts: false,
          format: 'mp3',
          max_results: 1,
          concurrent_downloads: 1,
          is_url: true,
          urls: [url]
        });

        jobs[data.job_id] = data;
        selectedJobId = data.job_id;
        document.getElementById('url-input').value = '';
        switchTab('jobs');
      } catch (e) {
        showError(e.message);
      } finally {
        btn.disabled = false;
        btnText.textContent = 'Download Now';
        btn.innerHTML = '<i data-feather="download" class="w-5 h-5"></i><span id="url-btn-text">Download Now</span>';
        feather.replace();
      }
    }

    async function handleSearch() {
      const query = document.getElementById('search-input').value.trim();
      if (!query) {
        showError('Enter a search query');
        return;
      }

      const btn = document.getElementById('search-btn');
      const btnText = document.getElementById('search-btn-text');
      btn.disabled = true;
      btnText.textContent = 'Searching...';
      btn.innerHTML = '<i data-feather="loader" class="w-5 h-5 animate-spin"></i><span id="search-btn-text">Searching...</span>';
      feather.replace();

      try {
        const data = await mockAPI(`${API_BASE}/search`, { 
          query, 
          max_results: 50,
          is_url: false
        });

        selectedVideos.clear();
        videoTitles = data.titles || {};
        displaySearchResults(data.results, data.titles);
      } catch (e) {
        showError(e.message);
      } finally {
        btn.disabled = false;
        btnText.textContent = 'Search YouTube';
        btn.innerHTML = '<i data-feather="search" class="w-5 h-5"></i><span id="search-btn-text">Search YouTube</span>';
        feather.replace();
      }
    }

    function displaySearchResults(results, titles) {
      const container = document.getElementById('search-results');
      const list = document.getElementById('video-list');
      const count = document.getElementById('result-count');

      count.textContent = results.length;
      list.innerHTML = '';

      results.forEach((url) => {
        const item = document.createElement('label');
        item.className = 'flex items-center space-x-3 bg-spooky-dark/50 hover:bg-spooky-dark/70 border border-spooky-accent/30 rounded-lg p-3 cursor-pointer transition-colors';
        
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'w-5 h-5 rounded border-spooky-accent/50 bg-spooky-dark/80 text-spooky-accent focus:ring-spooky-accent cursor-pointer';
        checkbox.dataset.url = url;
        checkbox.onchange = () => toggleVideo(url);

        const textDiv = document.createElement('div');
        textDiv.className = 'flex-1 min-w-0';

        const title = document.createElement('p');
        title.className = 'text-sm font-medium text-spooky-accent truncate';
        title.textContent = titles[url] || 'Loading title...';

        const urlText = document.createElement('p');
        urlText.className = 'text-xs text-spooky-primary/80 truncate';
        urlText.textContent = url;

        textDiv.appendChild(title);
        textDiv.appendChild(urlText);
        item.appendChild(checkbox);
        item.appendChild(textDiv);
        list.appendChild(item);
      });

      container.classList.remove('hidden');
      document.getElementById('download-options').classList.add('hidden');
    }

    function toggleVideo(url) {
      if (selectedVideos.has(url)) {
        selectedVideos.delete(url);
      } else {
        selectedVideos.add(url);
      }
      updateDownloadOptions();
    }

    function toggleSelectAll() {
      const checkboxes = Array.from(document.querySelectorAll('#video-list input[type="checkbox"]'));
      const allChecked = checkboxes.every(cb => cb.checked);

      checkboxes.forEach(cb => {
        cb.checked = !allChecked;
        const url = cb.dataset.url;
        if (!allChecked) {
          selectedVideos.add(url);
        } else {
          selectedVideos.delete(url);
        }
      });

      updateDownloadOptions();
      document.getElementById('select-all-text').textContent = allChecked ? 'Select All' : 'Deselect All';
    }

    function updateDownloadOptions() {
      const options = document.getElementById('download-options');
      const formatContainer = document.getElementById('format-container');

      if (selectedVideos.size > 0) {
        options.classList.remove('hidden');
        formatContainer.classList.toggle('hidden', !document.getElementById('opt-audio').checked);
        document.getElementById('download-btn-text').textContent = `Download ${selectedVideos.size} Video${selectedVideos.size !== 1 ? 's' : ''}`;
      } else {
        options.classList.add('hidden');
      }
    }

    async function handleDownload() {
      const query = document.getElementById('search-input').value.trim();
      const audio = document.getElementById('opt-audio').checked;
      const video = document.getElementById('opt-video').checked;
      const transcripts = document.getElementById('opt-transcripts').checked;

      if (!audio && !video && !transcripts) {
        showError('Select at least one option: audio, video, or transcripts');
        return;
      }

      const format = document.getElementById('audio-format').value;
      const concurrent = parseInt(document.getElementById('concurrent-slider').value);
      const urls = Array.from(selectedVideos);

      const btn = document.getElementById('download-btn');
      const btnText = document.getElementById('download-btn-text');
      btn.disabled = true;
      btnText.textContent = 'Starting Download...';
      btn.innerHTML = '<i data-feather="loader" class="w-5 h-5 animate-spin"></i><span id="download-btn-text">Starting Download...</span>';
      feather.replace();

      try {
        const data = await mockAPI(`${API_BASE}/download`, {
          query,
          audio,
          video,
          transcripts,
          format,
          max_results: urls.length,
          concurrent_downloads: concurrent,
          is_url: false,
          urls
        });

        jobs[data.job_id] = data;
        selectedJobId = data.job_id;
        switchTab('jobs');
        document.getElementById('search-results').classList.add('hidden');
        document.getElementById('search-input').value = '';
        selectedVideos.clear();
        showError(`Download queued: Job ${data.job_id.slice(-8)}`, true);
      } catch (e) {
        showError(e.message);
      } finally {
        btn.disabled = false;
        btnText.textContent = 'Download Videos';
        btn.innerHTML = '<i data-feather="download" class="w-5 h-5"></i><span id="download-btn-text">Download Videos</span>';
        feather.replace();
        updateDownloadOptions();
      }
    }

    function showError(msg, isSuccess = false) {
      const box = document.getElementById('error-box');
      const text = document.getElementById('error-text');
      const icon = box.querySelector('i');

      text.textContent = msg;

      if (isSuccess) {
        box.classList.remove('bg-spooky-primary/20', 'border-spooky-primary/60');
        box.classList.add('bg-spooky-accent/20', 'border-spooky-accent/60');
        text.classList.remove('text-spooky-primary');
        text.classList.add('text-spooky-accent');
        icon.classList.remove('text-spooky-primary');
        icon.classList.add('text-spooky-accent');
      } else {
        box.classList.remove('bg-spooky-accent/20', 'border-spooky-accent/60');
        box.classList.add('bg-spooky-primary/20', 'border-spooky-primary/60');
        text.classList.remove('text-spooky-accent');
        text.classList.add('text-spooky-primary');
        icon.classList.remove('text-spooky-accent');
        icon.classList.add('text-spooky-primary');
      }

      box.classList.remove('hidden');
      setTimeout(() => box.classList.add('hidden'), 5000);
    }

    async function fetchJobProgress(id) {
      try {
        const data = await mockAPI(`${API_BASE}/progress/${id}`, {});
        if (jobs[id]) {
          jobs[id] = { ...jobs[id], ...data };
        }
        return data;
      } catch (e) {
        console.error(`Progress fetch failed for ${id}:`, e);
        return null;
      }
    }

    async function refreshJobsList() {
      const list = document.getElementById('jobs-list');
      
      const promises = Object.keys(jobs).map(id => fetchJobProgress(id));
      await Promise.allSettled(promises);

      list.innerHTML = '';
      if (Object.keys(jobs).length === 0) {
        list.innerHTML = '<p class="text-center text-spooky-primary/70 py-8">No jobs yetâ€”start a download! <i data-feather="ghost" class="inline w-4 h-4"></i></p>';
        feather.replace();
        return;
      }

      Object.keys(jobs).sort((a, b) => (jobs[b]?.start_time || 0) - (jobs[a]?.start_time || 0)).forEach(id => {
        const job = jobs[id];

        const card = document.createElement('div');
        card.className = `job-card ${selectedJobId === id ? 'bg-spooky-accent/10 border-spooky-accent/50' : 'bg-spooky-dark/50 border-spooky-accent/30'} border rounded-lg p-4 cursor-pointer transition-colors hover:border-spooky-accent/50`;
        card.onclick = (e) => selectJob(id, e);

        const header = document.createElement('div');
        header.className = 'flex justify-between items-center mb-3';

        const title = document.createElement('h3');
        title.className = 'text-base font-semibold text-white truncate flex-1 min-w-0';
        title.textContent = job.query?.substring(0, 50) || 'Unknown Query';

        const statusBadge = document.createElement('span');
        statusBadge.className = 'text-xs font-medium px-2 py-1 rounded-full';

        let statusText = job.status || 'queued';
        let statusColor = 'bg-spooky-secondary/30 text-spooky-primary';
        switch (statusText) {
          case 'complete':
            statusText = 'Complete';
            statusColor = 'bg-spooky-accent/30 text-spooky-accent';
            break;
          case 'failed':
            statusText = 'Failed';
            statusColor = 'bg-red-500/20 text-red-400';
            break;
          case 'downloading':
            statusText = 'Downloading';
            statusColor = 'bg-orange-500/20 text-orange-400';
            break;
        }
        statusBadge.textContent = statusText;
        statusBadge.className += ` ${statusColor}`;

        header.appendChild(title);
        header.appendChild(statusBadge);

        const progressBar = document.createElement('div');
        progressBar.className = 'w-full bg-spooky-dark/80 rounded-full h-2 mb-2';
        const fill = document.createElement('div');
        fill.className = 'bg-gradient-to-r from-spooky-accent to-spooky-secondary h-2 rounded-full';
        fill.style.width = `${job.progress || 0}%`;
        progressBar.appendChild(fill);

        const message = document.createElement('p');
        message.className = 'text-sm text-spooky-primary/80 truncate';
        message.textContent = job.message || 'Initializing...';

        card.appendChild(header);
        card.appendChild(progressBar);
        card.appendChild(message);
        list.appendChild(card);
      });

      if (selectedJobId && jobs[selectedJobId]) {
        updateJobDetail(selectedJobId);
      }
    }

    function selectJob(id, e) {
      selectedJobId = id;
      updateJobDetail(id);
      document.querySelectorAll('.job-card').forEach(card => {
        card.classList.remove('bg-spooky-accent/10', 'border-spooky-accent/50');
        card.classList.add('bg-spooky-dark/50', 'border-spooky-accent/30');
      });
      e.currentTarget.classList.remove('bg-spooky-dark/50', 'border-spooky-accent/30');
      e.currentTarget.classList.add('bg-spooky-accent/10', 'border-spooky-accent/50');
    }

    async function updateJobDetail(id) {
      await fetchJobProgress(id);
      const job = jobs[id];
      if (!job) return;

      const detail = document.getElementById('job-detail');
      detail.classList.remove('hidden');
      detail.innerHTML = '';

      const header = document.createElement('div');
      header.className = 'flex justify-between items-center mb-6';
      
      const title = document.createElement('h2');
      title.className = 'text-xl font-semibold text-white truncate flex-1 min-w-0';
      title.textContent = `Job: ${job.query?.substring(0, 60) || 'N/A'}${job.query?.length > 60 ? '...' : ''}`;
      
      const elapsed = document.createElement('span');
      elapsed.className = 'text-sm text-spooky-primary/80 whitespace-nowrap ml-4';
      const mins = Math.floor((job.elapsed || 0) / 60);
      const secs = Math.floor((job.elapsed || 0) % 60);
      elapsed.textContent = `Elapsed: ${mins}m ${secs}s`;
      
      header.appendChild(title);
      header.appendChild(elapsed);
      detail.appendChild(header);

      const statsGrid = document.createElement('div');
      statsGrid.className = 'grid grid-cols-2 md:grid-cols-4 gap-3 mb-6';
      
      const stats = [
        { label: 'Total', value: job.total_videos || 0, color: 'text-white' },
        { label: 'Completed', value: job.completed_videos || 0, color: 'text-spooky-accent' },
        { label: 'Failed', value: job.failed_videos || 0, color: 'text-red-400' },
        { label: 'Progress', value: `${job.progress || 0}%`, color: 'text-spooky-accent' }
      ];
      
      stats.forEach(stat => {
        const box = document.createElement('div');
        box.className = 'bg-spooky-dark/50 border border-spooky-accent/30 rounded-lg p-4 text-center';
        
        const val = document.createElement('p');
        val.className = `text-2xl font-bold ${stat.color} mb-1`;
        val.textContent = stat.value;
        
        const lab = document.createElement('p');
        lab.className = 'text-xs text-spooky-primary/80';
        lab.textContent = stat.label;
        
        box.appendChild(val);
        box.appendChild(lab);
        statsGrid.appendChild(box);
      });
      
      detail.appendChild(statsGrid);

      const msg = document.createElement('p');
      msg.className = 'text-lg font-medium text-spooky-accent mb-6';
      msg.textContent = job.message || 'No updates yet';
      detail.appendChild(msg);

      if (job.status === 'complete' && job.results && job.results.length > 0) {
        const table = document.createElement('div');
        table.className = 'bg-spooky-dark/50 border border-spooky-accent/30 rounded-lg overflow-hidden';
        
        const headerRow = document.createElement('div');
        headerRow.className = 'grid grid-cols-6 gap-4 bg-spooky-accent/10 p-3 border-b border-spooky-accent/30';
        
        ['Title', 'Status', 'Size (MB)', 'Duration', 'Retries', 'IP'].forEach(text => {
          const cell = document.createElement('div');
          cell.className = 'text-sm font-medium text-spooky-accent truncate';
          cell.textContent = text;
          headerRow.appendChild(cell);
        });
        
        table.appendChild(headerRow);
        
        job.results.forEach(result => {
          const row = document.createElement('div');
          row.className = 'grid grid-cols-6 gap-4 p-3 border-b border-spooky-accent/10 last:border-0 hover:bg-spooky-dark/70 transition-colors';
          
          const titleCell = document.createElement('div');
          titleCell.className = 'text-sm text-white truncate';
          titleCell.textContent = result.title || 'N/A';
          row.appendChild(titleCell);
          
          const statusCell = document.createElement('div');
          statusCell.className = `text-sm font-medium ${result.status === 'success' ? 'text-spooky-accent' : 'text-red-400'}`;
          statusCell.textContent = result.status;
          row.appendChild(statusCell);
          
          const sizeCell = document.createElement('div');
          sizeCell.className = 'text-sm text-spooky-primary/80';
          sizeCell.textContent = (result.size_mb || 0).toFixed(1);
          row.appendChild(sizeCell);
          
          const durCell = document.createElement('div');
          durCell.className = 'text-sm text-spooky-primary/80';
          durCell.textContent = Math.floor(result.duration || 0);
          row.appendChild(durCell);
          
          const retCell = document.createElement('div');
          retCell.className = 'text-sm text-spooky-primary/80';
          retCell.textContent = result.retries || 0;
          row.appendChild(retCell);
          
          const ipCell = document.createElement('div');
          ipCell.className = 'text-sm font-mono text-spooky-primary/80 truncate';
          ipCell.textContent = result.ip || 'N/A';
          row.appendChild(ipCell);
          
          table.appendChild(row);
        });
        
        detail.appendChild(table);
      } else if (job.status === 'failed') {
        const failMsg = document.createElement('div');
        failMsg.className = 'bg-red-500/10 border border-red-500/30 rounded-lg p-4 text-red-400 flex items-center space-x-3';
        failMsg.innerHTML = `<i data-feather="alert-triangle" class="w-5 h-5 flex-shrink-0"></i><span>Job failed: ${job.message || 'Unknown error'}</span>`;
        detail.appendChild(failMsg);
        feather.replace();
      }
    }
  </script>
</body>
</html>
## end of script.


ghosttube-tutorial.html
import React, { useState } from 'react';
import { Layers, Code, Zap, ChevronRight, BookOpen, Lightbulb } from 'lucide-react';

export default function GhostTubeCompleteTutorial() {
  const [activeTab, setActiveTab] = useState('overview');
  const [expandedSections, setExpandedSections] = useState({});

  const toggleSection = (id) => {
    setExpandedSections(prev => ({ ...prev, [id]: !prev[id] }));
  };

  const architectureLayers = [
    {
      id: 'layer1',
      number: 1,
      name: 'Presentation Layer',
      location: 'FRONTEND (index.html)',
      color: 'from-red-600 to-orange-600',
      why: 'Users need a visual interface to interact with the downloader. HTML provides structure, CSS makes it beautiful, and JavaScript makes it interactive.',
      technologies: [
        {
          tech: 'HTML5',
          why: 'Standard markup language for web pages. Creates the skeleton/structure.',
          code: `<!-- Main container -->
<div class="container mx-auto px-4 py-8">
  <!-- Search input -->
  <input id="search-input" type="text" 
         placeholder="Search YouTube...">
  
  <!-- Search button -->
  <button onclick="handleSearch()">
    Search YouTube
  </button>
</div>`,
          keyElements: [
            '<input id="search-input"> - Where users type search queries',
            '<button onclick="handleSearch()"> - Triggers search function',
            '<div id="search-results"> - Container for video results',
            '<div id="jobs-list"> - Shows active download jobs'
          ]
        },
        {
          tech: 'CSS3 + Tailwind',
          why: 'CSS provides custom animations and effects. Tailwind gives pre-built utility classes for rapid styling without writing CSS.',
          code: `/* Custom animation */
@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

.floating {
  animation: float 3s ease-in-out infinite;
}

/* Tailwind utilities */
<div class="bg-spooky-dark rounded-xl p-6 
            hover:scale-105 transition-all">
</div>`,
          keyElements: [
            'Custom @keyframes - Smooth floating ghost animation',
            '.glow class - Text shadow effects for spooky look',
            'Tailwind utilities - bg-*, rounded-*, flex, grid',
            'Responsive design - Works on mobile and desktop'
          ]
        },
        {
          tech: 'Vanilla JavaScript',
          why: 'Makes the page dynamic. Handles user interactions, updates the UI in real-time, and communicates with the backend.',
          code: `// Global state management
let selectedVideos = new Set();
let jobs = {};

// API communication
async function handleSearch() {
  const query = document.getElementById('search-input').value;
  
  const response = await fetch('/api/search', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query, max_results: 50 })
  });
  
  const data = await response.json();
  displaySearchResults(data.results);
}`,
          keyElements: [
            'State: selectedVideos (Set), jobs (Object) - Track selections',
            'fetch() API - Sends HTTP requests to backend',
            'DOM updates - innerHTML, appendChild() modify page',
            'Event handlers - onclick, onchange trigger functions'
          ]
        }
      ]
    },
    {
      id: 'layer2',
      number: 2,
      name: 'API Layer',
      location: 'BACKEND (main.py)',
      color: 'from-green-600 to-emerald-600',
      why: 'Frontend and backend speak different languages. The API layer translates HTTP requests into Python function calls and vice versa.',
      technologies: [
        {
          tech: 'FastAPI',
          why: 'Modern Python web framework. Fast, automatic validation, auto-generates API docs, supports async operations.',
          code: `from fastapi import FastAPI

app = FastAPI(title="ðŸ‘»Ghosttube")

@app.post("/api/search")
async def api_search(req: SearchRequest):
    results = search_youtube(req.query)
    return {"results": results}`,
          keyElements: [
            '@app.post() decorator creates endpoint',
            'Automatic JSON serialization',
            'async def for non-blocking',
            'CORS middleware allows frontend access'
          ]
        },
        {
          tech: 'Pydantic',
          why: 'Validates incoming data automatically.',
          code: `class SearchRequest(BaseModel):
    query: str = Field(..., min_length=1)
    max_results: int = Field(50, ge=1, le=100)`,
          keyElements: [
            'Field() enforces constraints',
            'Automatic type conversion',
            'Clear error messages'
          ]
        }
      ]
    },
    {
      id: 'layer3',
      number: 3,
      name: 'Business Logic',
      location: 'BACKEND (main.py)',
      color: 'from-blue-600 to-cyan-600',
      why: 'The brain - orchestrates searches, manages downloads, handles retries.',
      technologies: [
        {
          tech: 'Job Management',
          why: 'Track multiple simultaneous downloads.',
          code: `@dataclass
class JobState:
    job_id: str
    status: str
    progress: int = 0
    
jobs: Dict[str, JobState] = {}`,
          keyElements: [
            '@dataclass auto-generates methods',
            'Thread-safe with Lock()',
            'In-memory job storage'
          ]
        },
        {
          tech: 'Multi-Method Search',
          why: 'Fallback when one method fails.',
          code: `def search_youtube(query, max_results):
    methods = [
        ('yt-dlp', _search_ytdlp),
        ('DuckDuckGo', _search_duckduckgo)
    ]
    for name, method in methods:
        try:
            return method(query, max_results)
        except:
            continue`,
          keyElements: [
            'Ordered fallback list',
            'Try/except with continue',
            'Returns first success'
          ]
        },
        {
          tech: 'Concurrent Downloads',
          why: 'Download multiple videos simultaneously.',
          code: `with ThreadPoolExecutor(max_workers=3) as executor:
    futures = {}
    for url in results:
        future = executor.submit(download_video, url)
        futures[future] = url
    
    for future in as_completed(futures):
        result = future.result()`,
          keyElements: [
            'ThreadPoolExecutor manages threads',
            'executor.submit() queues work',
            'as_completed() processes results'
          ]
        }
      ]
    },
    {
      id: 'layer4',
      number: 4,
      name: 'Integration Layer',
      location: 'BACKEND (main.py)',
      color: 'from-purple-600 to-pink-600',
      why: 'Adapts external tools into consistent Python interfaces.',
      technologies: [
        {
          tech: 'yt-dlp via subprocess',
          why: 'yt-dlp is CLI tool, subprocess executes it.',
          code: `cmd = [sys.executable, '-m', 'yt_dlp',
       '--proxy', TOR_PROXY,
       '-x', '--audio-format', 'mp3',
       url]

subprocess.run(cmd, check=True, timeout=300)`,
          keyElements: [
            'subprocess.run() executes command',
            'capture_output=True gets stdout',
            'timeout prevents hanging'
          ]
        },
        {
          tech: 'Tor Network (stem)',
          why: 'Control Tor daemon programmatically.',
          code: `with Controller.from_port(port=9051) as ctrl:
    ctrl.authenticate()
    ctrl.signal(Signal.NEWNYM)

requests.get(url, proxies=PROXIES)`,
          keyElements: [
            'Signal.NEWNYM rotates circuit',
            'SOCKS5 proxy on port 9050',
            'All requests proxied'
          ]
        }
      ]
    },
    {
      id: 'layer5',
      number: 5,
      name: 'Data Access',
      location: 'BACKEND (main.py)',
      color: 'from-yellow-600 to-orange-600',
      why: 'Organized file storage and state management.',
      technologies: [
        {
          tech: 'File System (pathlib)',
          why: 'Modern file handling.',
          code: `OUTPUT_AUDIO = Path('output/audio')
OUTPUT_AUDIO.mkdir(parents=True, exist_ok=True)

size_mb = path.stat().st_size / (1024*1024)`,
          keyElements: [
            'mkdir() creates directories',
            'glob() iterates files',
            'Cross-platform paths'
          ]
        },
        {
          tech: 'JSON Logging',
          why: 'Structured job results.',
          code: `with open(log_file, 'w') as f:
    json.dump({
        'job_id': job_id,
        'results': [asdict(r) for r in results]
    }, f, indent=2)`,
          keyElements: [
            'asdict() converts dataclass',
            'Pretty-printed JSON',
            'Persistent audit trail'
          ]
        }
      ]
    },
    {
      id: 'layer6',
      number: 6,
      name: 'Infrastructure',
      location: 'SYSTEM',
      color: 'from-indigo-600 to-violet-600',
      why: 'Foundation that everything runs on.',
      technologies: [
        {
          tech: 'Python 3.8+ Runtime',
          why: 'Executes code, manages memory.',
          code: `if sys.version_info < (3, 8):
    sys.exit(1)

python3 main.py`,
          keyElements: [
            'Version checking',
            'Automatic memory management',
            'Thread scheduling'
          ]
        },
        {
          tech: 'Tor Daemon',
          why: 'Routes traffic for anonymity.',
          code: `# torrc config
SOCKSPort 9050
ControlPort 9051

sudo systemctl start tor`,
          keyElements: [
            'SOCKS5 proxy port 9050',
            'Control port 9051',
            'Onion routing'
          ]
        },
        {
          tech: 'Uvicorn Server',
          why: 'Production web server.',
          code: `uvicorn.run(app, host="0.0.0.0", port=8000)`,
          keyElements: [
            'ASGI server',
            'Async support',
            'Production-ready'
          ]
        }
      ]
    },
    {
      id: 'layer7',
      number: 7,
      name: 'External Services',
      location: 'INTERNET',
      color: 'from-gray-600 to-slate-600',
      why: 'Third-party services we depend on.',
      technologies: [
        {
          tech: 'YouTube',
          why: 'Source of video content.',
          code: `# Accessed via yt-dlp
subprocess.run(['yt_dlp', video_url])

# Or direct scraping
r = requests.get('youtube.com/results?q=...')`,
          keyElements: [
            'Video streaming',
            'Rate limiting (429)',
            'Bot detection'
          ]
        },
        {
          tech: 'Search Engines',
          why: 'Fallback search methods.',
          code: `url = f"duckduckgo.com/html/?q={query}+site:youtube.com"
r = requests.get(url, proxies=PROXIES)`,
          keyElements: [
            'HTML scraping',
            'Less aggressive limits',
            'Different IP reputation'
          ]
        },
        {
          tech: 'CDNs',
          why: 'Fast library delivery.',
          code: `<script src="https://cdn.tailwindcss.com"></script>
<script src="https://unpkg.com/feather-icons"></script>`,
          keyElements: [
            'Edge caching',
            'Global distribution',
            'No hosting costs'
          ]
        }
      ]
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-4 mb-4">
            <BookOpen className="w-16 h-16 text-purple-400" />
            <h1 className="text-6xl font-bold text-white">GhostTube ðŸ‘»</h1>
          </div>
          <h2 className="text-3xl text-purple-300 mb-2">Complete Architecture Tutorial</h2>
          <p className="text-xl text-gray-400">Every technology, every function, every reason why</p>
        </div>

        <div className="flex flex-wrap gap-2 mb-8 bg-gray-800/50 p-2 rounded-xl">
          <button
            onClick={() => setActiveTab('overview')}
            className={`px-4 py-2 rounded-lg font-medium transition ${
              activeTab === 'overview' ? 'bg-purple-600 text-white' : 'bg-gray-700 text-gray-300'
            }`}
          >
            Overview
          </button>
          <button
            onClick={() => setActiveTab('layers')}
            className={`px-4 py-2 rounded-lg font-medium transition ${
              activeTab === 'layers' ? 'bg-purple-600 text-white' : 'bg-gray-700 text-gray-300'
            }`}
          >
            7 Layers I would like for you to make the corrections that I stated above present each script. That's the python script. The HTML file, the index HTML file. And if you feel up to it, finishing my little tutorial
          </button>
        </div>

        {activeTab === 'overview' && (
          <div className="space-y-6">
            <div className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 border-2 border-purple-500/30 rounded-xl p-8">
              <h2 className="text-3xl font-bold text-white mb-4">What Is GhostTube?</h2>
              <p className="text-gray-200 text-lg mb-4">
                Anonymous YouTube downloader routing all traffic through Tor network.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-black/30 rounded-lg p-4">
                  <h3 className="text-xl font-bold text-purple-300 mb-2">Frontend</h3>
                  <ul className="space-y-1 text-gray-300 text-sm">
                    <li>â€¢ HTML5 structure</li>
                    <li>â€¢ CSS3 + Tailwind styling</li>
                    <li>â€¢ Vanilla JavaScript</li>
                    <li>â€¢ Real-time updates</li>
                  </ul>
                </div>
                <div className="bg-black/30 rounded-lg p-4">
                  <h3 className="text-xl font-bold text-purple-300 mb-2">Backend</h3>
                  <ul className="space-y-1 text-gray-300 text-sm">
                    <li>â€¢ Python + FastAPI</li>
                    <li>â€¢ Concurrent downloads</li>
                    <li>â€¢ Tor integration</li>
                    <li>â€¢ Multi-method search</li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="bg-gray-800/50 rounded-xl p-6 border border-purple-500/30">
              <h2 className="text-3xl font-bold text-white mb-6 text-center">7-Layer Architecture</h2>
              <div className="space-y-3">
                {architectureLayers.map((layer) => (
                  <div
                    key={layer.id}
                    className={`bg-gradient-to-r ${layer.color} p-4 rounded-lg flex items-center gap-4 cursor-pointer hover:brightness-110`}
                    onClick={() => setActiveTab('layers')}
                  >
                    <div className="bg-white/20 rounded-full w-10 h-10 flex items-center justify-center font-bold text-white">
                      {layer.number}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-xl font-bold text-white">{layer.name}</h3>
                      <p className="text-white/90 text-sm">{layer.location}</p>
                    </div>
                    <ChevronRight className="w-6 h-6 text-white" />
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'layers' && (
          <div className="space-y-4">
            {architectureLayers.map((layer) => {
              const isExpanded = expandedSections[layer.id];
              return (
                <div key={layer.id} className={`bg-gradient-to-r ${layer.color} rounded-xl shadow-2xl overflow-hidden`}>
                  <button
                    onClick={() => toggleSection(layer.id)}
                    className="w-full p-6 flex items-center justify-between hover:brightness-110"
                  >
                    <div className="flex items-center gap-4">
                      <div className="bg-white/20 rounded-full w-12 h-12 flex items-center justify-center font-bold text-white text-xl">
                        {layer.number}
                      </div>
                      <div className="text-left">
                        <h2 className="text-2xl font-bold text-white">{layer.name}</h2>
                        <p className="text-white/90">{layer.location}</p>
                      </div>
                    </div>
                    <ChevronRight className={`w-8 h-8 text-white transition-transform ${isExpanded ? 'rotate-90' : ''}`} />
                  </button>

                  {isExpanded && (
                    <div className="bg-black/20 p-6 space-y-6">
                      <div className="bg-yellow-500/20 border-l-4 border-yellow-500 rounded p-4">
                        <h3 className="text-lg font-bold text-yellow-300 mb-2 flex items-center gap-2">
                          <Lightbulb className="w-5 h-5" />
                          Why This Layer
                        </h3>
                        <p className="text-white/90">{layer.why}</p>
                      </div>

                      {layer.technologies.map((tech, tidx) => (
                        <div key={tidx} className="bg-white/10 rounded-lg p-5 space-y-4">
                          <div>
                            <h3 className="text-2xl font-bold text-white mb-1">{tech.tech}</h3>
                            <p className="text-purple-200 italic mb-3">{tech.why}</p>
                          </div>

                          <div className="bg-gray-900 rounded-lg p-4 overflow-x-auto">
                            <pre className="text-green-400 text-sm font-mono">{tech.code}</pre>
                          </div>

                          <div>
                            <h4 className="text-sm font-bold text-purple-300 mb-2">Key Elements:</h4>
                            <div className="space-y-2">
                              {tech.keyElements.map((element, eidx) => (
                                <div key={eidx} className="flex items-start gap-2">
                                  <Zap className="w-4 h-4 text-yellow-400 flex-shrink-0 mt-1" />
                                  <span className="text-white/90 text-sm">{element}</span>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}

## unfinished, obviously. now, obviously I want you to fix the mistakes mentioned above. I want, I do not want you to change anything. Other than what was mentioned above, that is the only thing you have complete freedom of I want it. Each script, 3 in total should be the python script. The index ht male file and the tutorial three separate markdown boxes.
